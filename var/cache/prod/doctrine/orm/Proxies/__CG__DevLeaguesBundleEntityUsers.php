<?php

namespace Proxies\__CG__\DevLeaguesBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Users extends \DevLeaguesBundle\Entity\Users implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'DevLeaguesBundle\\Entity\\Users' . "\0" . 'id', '' . "\0" . 'DevLeaguesBundle\\Entity\\Users' . "\0" . 'firstName', '' . "\0" . 'DevLeaguesBundle\\Entity\\Users' . "\0" . 'lastName', '' . "\0" . 'DevLeaguesBundle\\Entity\\Users' . "\0" . 'experience', '' . "\0" . 'DevLeaguesBundle\\Entity\\Users' . "\0" . 'avatar', '' . "\0" . 'DevLeaguesBundle\\Entity\\Users' . "\0" . 'notoriety', '' . "\0" . 'DevLeaguesBundle\\Entity\\Users' . "\0" . 'leagues', '' . "\0" . 'DevLeaguesBundle\\Entity\\Users' . "\0" . 'technologies', '' . "\0" . 'DevLeaguesBundle\\Entity\\Users' . "\0" . 'events', '' . "\0" . 'DevLeaguesBundle\\Entity\\Users' . "\0" . 'friends'];
        }

        return ['__isInitialized__', '' . "\0" . 'DevLeaguesBundle\\Entity\\Users' . "\0" . 'id', '' . "\0" . 'DevLeaguesBundle\\Entity\\Users' . "\0" . 'firstName', '' . "\0" . 'DevLeaguesBundle\\Entity\\Users' . "\0" . 'lastName', '' . "\0" . 'DevLeaguesBundle\\Entity\\Users' . "\0" . 'experience', '' . "\0" . 'DevLeaguesBundle\\Entity\\Users' . "\0" . 'avatar', '' . "\0" . 'DevLeaguesBundle\\Entity\\Users' . "\0" . 'notoriety', '' . "\0" . 'DevLeaguesBundle\\Entity\\Users' . "\0" . 'leagues', '' . "\0" . 'DevLeaguesBundle\\Entity\\Users' . "\0" . 'technologies', '' . "\0" . 'DevLeaguesBundle\\Entity\\Users' . "\0" . 'events', '' . "\0" . 'DevLeaguesBundle\\Entity\\Users' . "\0" . 'friends'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Users $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setFirstName($firstName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFirstName', [$firstName]);

        return parent::setFirstName($firstName);
    }

    /**
     * {@inheritDoc}
     */
    public function getFirstName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFirstName', []);

        return parent::getFirstName();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastName($lastName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastName', [$lastName]);

        return parent::setLastName($lastName);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastName', []);

        return parent::getLastName();
    }

    /**
     * {@inheritDoc}
     */
    public function setExperience($experience)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExperience', [$experience]);

        return parent::setExperience($experience);
    }

    /**
     * {@inheritDoc}
     */
    public function getExperience()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExperience', []);

        return parent::getExperience();
    }

    /**
     * {@inheritDoc}
     */
    public function setAvatar($avatar)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAvatar', [$avatar]);

        return parent::setAvatar($avatar);
    }

    /**
     * {@inheritDoc}
     */
    public function getAvatar()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAvatar', []);

        return parent::getAvatar();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotoriety($notoriety)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotoriety', [$notoriety]);

        return parent::setNotoriety($notoriety);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotoriety()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotoriety', []);

        return parent::getNotoriety();
    }

    /**
     * {@inheritDoc}
     */
    public function setLeagues($leagues)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLeagues', [$leagues]);

        return parent::setLeagues($leagues);
    }

    /**
     * {@inheritDoc}
     */
    public function getLeagues()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLeagues', []);

        return parent::getLeagues();
    }

    /**
     * {@inheritDoc}
     */
    public function setTechnologies($technologies)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTechnologies', [$technologies]);

        return parent::setTechnologies($technologies);
    }

    /**
     * {@inheritDoc}
     */
    public function getTechnologies()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTechnologies', []);

        return parent::getTechnologies();
    }

    /**
     * {@inheritDoc}
     */
    public function setEvents($events)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEvents', [$events]);

        return parent::setEvents($events);
    }

    /**
     * {@inheritDoc}
     */
    public function getEvents()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEvents', []);

        return parent::getEvents();
    }

    /**
     * {@inheritDoc}
     */
    public function setFriends($friends)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFriends', [$friends]);

        return parent::setFriends($friends);
    }

    /**
     * {@inheritDoc}
     */
    public function getFriends()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFriends', []);

        return parent::getFriends();
    }

}
